#version 460

#extension GL_EXT_shader_16bit_storage : require

#define MAX_DEPTH 6
#define EPSILON 1e-6f

/**
 * All the structs used in this traversal shader
 */
struct Node {
    uint bitmask_low;
    uint bitmask_high;
    uint header;
};

struct Hit {
    vec3 hit_position;
    vec3 hit_normal;
    uint material_index;
};

/**
 * All the buffers and uniforms used in this traversal shader
 */
layout (local_size_x = 16, local_size_y = 16) in;

layout (rgba8, set = 0, binding = 0) uniform image2D img;

layout (set = 0, binding = 1) uniform CameraData {
    vec4 position;
    mat4 invView;
    mat4 invProj;
} camera;

layout (std430, set = 0, binding = 2) buffer Nodes {
    Node node_pool[];
};

layout (std430, set = 0, binding = 3) buffer Voxels {
    uint16_t voxel_pool[];
};

/**
 * A bunch of utility functions
 */
vec3 get_ray_dir(ivec2 screen_position) {
    ivec2 screen_size = imageSize(img);
    vec2 screen_space = ((screen_position + vec2(0.5)) / screen_size).xy;
    screen_space.y = 1.0 - screen_space.y;
    vec4 clip_space = vec4(screen_space * 2.0f - 1.0f, -1.0, 1.0);
    vec4 eye_space = vec4(vec2(camera.invProj * clip_space), -1.0, 0.0);
    vec3 ray_dir = normalize(vec3(camera.invView * eye_space));
    vec3 is_small = step(abs(ray_dir), vec3(EPSILON)); // 1.0 if |dir| < EPSILON
    return ray_dir + is_small * EPSILON * sign(ray_dir + 0.5); // nudge
}

vec3 clip_ray_to_aabb(vec3 ray_pos, vec3 ray_dir, vec3 bb_min, vec3 bb_max) {
    vec3 invDir = 1.0 / ray_dir;
    vec3 t1 = (bb_min - ray_pos) * invDir;
    vec3 t2 = (bb_max - ray_pos) * invDir;
    vec3 temp = t1;
    t1 = min(temp, t2);
    t2 = max(temp, t2);
    float tmin = max(t1.x, max(t1.y, t1.z));
    float tmax = min(t2.x, min(t2.y, t2.z));
    return tmin > 0 && tmin < tmax ? ray_pos + ray_dir * tmin : ray_pos;
}

int get_node_cell_index(vec3 pos, int scale_exp) {
    uvec3 cell_pos = (floatBitsToUint(pos) >> uint(scale_exp)) & uvec3(3u);
    return int(cell_pos.x + cell_pos.z * 4u + cell_pos.y * 16u);
}

vec3 floor_scale(vec3 pos, int scale_exp) {
    uint mask = ~0u << uint(scale_exp);
    return uintBitsToFloat(floatBitsToUint(pos) & uvec3(mask));
}

vec3 get_mirrored_pos(vec3 pos, vec3 dir, bool range_check) {
    uvec3 flipped_bits = floatBitsToUint(pos) ^ uvec3(0x007FFFFF);
    vec3 mirrored = uintBitsToFloat(flipped_bits);
    if (range_check && (any(lessThan(pos, vec3(1.0))) || any(greaterThanEqual(pos, vec3(2.0))))) {
        mirrored = vec3(3.0) - pos;
    }
    return mix(pos, mirrored, greaterThan(dir, vec3(0.0)));
}

int popcnt_var64(uint maskLow, uint maskHigh, uint width) {
    uint filtered_low, filtered_high;
    if (width < 32) { filtered_low = maskLow & ((1u << width) - 1u); filtered_high = 0u; }
    else { filtered_low = maskLow; filtered_high = maskHigh & ((1u << (width - 32)) - 1u); }
    return bitCount(filtered_low) + bitCount(filtered_high);
}

/**
 * The main traversal function
 */
Hit raytrace(inout vec3 ray_pos, vec3 ray_dir) {
    // per-thread stack for backtracking
    uint stack[11];
    int scaleExp = 21;       // root cell exponent (0.25 unit size)
    uint nodeIdx = 0u;
    Node node = node_pool[nodeIdx];

    // build mirror mask (3 bits per axis)
    uint mirrorMask = 0u;
    if (ray_dir.x > 0.0) mirrorMask |= 3u << 0;
    if (ray_dir.y > 0.0) mirrorMask |= 3u << 4;
    if (ray_dir.z > 0.0) mirrorMask |= 3u << 2;

    // mirror origin into “negative” octant
    ray_pos = get_mirrored_pos(ray_pos, ray_dir, true);

    // clamp into [1, 2)
    vec3 pos    = clamp(ray_pos, vec3(1.0), vec3(1.9999999));
    vec3 invDir = 1.0 / -abs(ray_dir);

    vec3 sideDist = vec3(0.0);
    float tmax    = 0.0;

    // --- Octree traversal loop ---
    for (int i = 0; i < 256; ++i) {
        // which leaf‐child are we in?
        uint cellIdx  = uint(get_node_cell_index(pos, scaleExp));
        uint childIdx = cellIdx ^ mirrorMask;

        bool isLeaf = (node.header & 1u) != 0u;
        bool hasChild = (childIdx < 32u)
        ? (((node.bitmask_low  >> childIdx) & 1u) != 0u)
        : (((node.bitmask_high >> (childIdx - 32u)) & 1u) != 0u);

        // descend as far as possible
        while (hasChild && !isLeaf) {
            stack[scaleExp >> 1] = nodeIdx;
            uint childPtr = node.header >> 1;
            int offset = popcnt_var64(node.bitmask_low,
                                      node.bitmask_high,
                                      childIdx);
            nodeIdx = childPtr + uint(offset);
            node    = node_pool[nodeIdx];
            scaleExp -= 2;

            cellIdx  = uint(get_node_cell_index(pos, scaleExp));
            childIdx = cellIdx ^ mirrorMask;
            isLeaf   = (node.header & 1u) != 0u;
            hasChild = (childIdx < 32u)
            ? (((node.bitmask_low  >> childIdx) & 1u) != 0u)
            : (((node.bitmask_high >> (childIdx - 32u)) & 1u) != 0u);
        }

        // if leaf‐child, stop
        if (hasChild && isLeaf) {
            break;
        }

        // decide whether to step down one level
        int advScaleExp = scaleExp;
        uint shift = childIdx & 42u; // 0b101010
        uint sh_lo;
        if (shift < 32u) {
            sh_lo = (node.bitmask_low >> shift)
            | (node.bitmask_high << (32u - shift));
        } else {
            sh_lo = node.bitmask_high >> (shift - 32u);
        }
        if ((sh_lo & 0x00330033u) == 0u) {
            advScaleExp++;
        }

        // move pos to next cell boundary
        vec3 cellMin = floor_scale(pos, advScaleExp);
        sideDist = (cellMin - ray_pos) * invDir;
        tmax = min(min(sideDist.x, sideDist.y), sideDist.z);

        bvec3 hitSide = equal(sideDist, vec3(tmax));
        ivec3 oneOff = ivec3((1 << advScaleExp) - 1);
        ivec3 step = ivec3(
        hitSide.x ? -1 : oneOff.x,
        hitSide.y ? -1 : oneOff.y,
        hitSide.z ? -1 : oneOff.z
        );
        ivec3 neighborMax = ivec3(cellMin) + step;

        pos = min(ray_pos - abs(ray_dir) * tmax,
                  vec3(neighborMax));

        // find common ancestor level
        uvec3 diffPos = floatBitsToUint(pos)
        ^ floatBitsToUint(cellMin);
        uint diffMask = (diffPos.x | diffPos.y | diffPos.z)
        & 0xFFAAAAAAu;
        int diffExp = findMSB(int(diffMask));
        if (diffExp > scaleExp) {
            scaleExp = diffExp;
            if (diffExp > 21) {
                break;  // off the root
            }
            nodeIdx = stack[scaleExp >> 1];
            node    = node_pool[nodeIdx];
        }
    }

    // --- assemble the hit result ---
    Hit hit;
    hit.material_index = 0u;
    hit.hit_normal     = vec3(0.0);
    hit.hit_position   = ray_pos; // default if nothing hit

    bool isLeafNode = (node.header & 1u) != 0u;
    if (isLeafNode && scaleExp <= 21) {
        // mirror back the final pos
        pos     = get_mirrored_pos(pos, ray_dir, false);
        ray_pos = pos;
        hit.hit_position = ray_pos;

        uint idx   = uint(get_node_cell_index(pos, scaleExp));
        int  off   = popcnt_var64(node.bitmask_low,
                                  node.bitmask_high,
                                  idx);
        uint leafP = node.header >> 1;
        uint matId = leafP + uint(off);
        hit.material_index = matId;

        // compute which face we hit
        bvec3 sideMask = greaterThanEqual(vec3(tmax), sideDist);
        vec3 normal = vec3(
        sideMask.x ? -sign(ray_dir.x) : 0.0,
        sideMask.y ? -sign(ray_dir.y) : 0.0,
        sideMask.z ? -sign(ray_dir.z) : 0.0
        );
        hit.hit_normal = normal;
    }

    return hit;
}

/**
 * Our voxel color table
 */
const vec3 colors[] = {
vec3(0.69, 0.88, 0.90), // SKY_BLUE
vec3(1.00, 0.40, 0.40), // DEBUG_RED
vec3(0.40, 1.00, 0.40), // DEBUG_GREEN
vec3(0.40, 0.40, 1.00), // DEBUG_BLUE
vec3(0.55, 0.55, 0.55), // STONE
vec3(0.42, 0.32, 0.25), // DIRT
vec3(0.30, 0.59, 0.31)  // GRASS
};

/**
 * Main function!
 */
void main() {
    // make sure current thread is inside the window bounds
    ivec2 screen_size = imageSize(img);
    if (any(greaterThanEqual(gl_GlobalInvocationID.xy, screen_size))) return;

    // get the ray direction and position for the current pixel
    const vec3 ray_dir = get_ray_dir(ivec2(gl_GlobalInvocationID.xy));
    vec3 ray_pos = camera.position.xyz;

    // primary ray
    Hit primary_ray = raytrace(ray_pos, ray_dir);

    // doing a bunch of math
    uint voxel = uint(voxel_pool[primary_ray.material_index]);
    uint encoded_color = voxel & 0x7fu;
    vec3 color = colors[encoded_color < 7 ? encoded_color : 1].xyz;
    uint encoded_normal = (voxel >> 7);
    vec3 normal = normalize(vec3(float((encoded_normal >> 6) & 0x7u), float((encoded_normal >> 3) & 0x7u), float(encoded_normal & 0x7u)) / 3.5 - 1.0);

    // raw color output
    imageStore(img, ivec2(gl_GlobalInvocationID.xy), vec4(color, 0));
}