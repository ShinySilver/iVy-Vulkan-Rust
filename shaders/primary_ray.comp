#version 460
#extension GL_EXT_shader_16bit_storage: require

layout (local_size_x = 8, local_size_y = 8) in;

#define SIZEOF_NODE 12
#define NODE_WIDTH 4
#define NODE_WIDTH_SQRT 2
#define MAX_DEPTH 5
#define WORLD_WIDTH (0x1u<<(MAX_DEPTH*2))

#define EPSILON 1e-6f
#define MINI_STEP_SIZE 5e-2f
#define MICRO_STEP_SIZE 2e-3f

struct Node {
    uint bitmask_low;
    uint bitmask_high;
    uint header;
};

layout (set = 0, binding = 0) writeonly uniform image2D img;

layout (set = 0, binding = 1) readonly uniform CameraData {
    vec4 position;
    mat4 invView;
    mat4 invProj;
} camera;

layout (std430, set = 0, binding = 2) readonly buffer Nodes {
    Node node_pool[];
};

layout (std430, set = 0, binding = 3) readonly buffer Voxels {
    uint16_t voxel_pool[];
};

/**
 * Basic axis-aligned bounding box collision check.
 */
float AABBIntersect(vec3 bmin, vec3 bmax, vec3 orig, vec3 invdir, out vec3 aabb_mask) {
    vec3 t0 = (bmin - orig) * invdir;
    vec3 t1 = (bmax - orig) * invdir;
    vec3 vmin = min(t0, t1), vmax = max(t0, t1);
    float tmin = max(vmin.x, max(vmin.y, vmin.z));
    float tmax = min(vmax.x, min(vmax.y, vmax.z));
    if (tmax < tmin || tmax < 0.0) return -1.0;
    aabb_mask = step(vmin, vec3(tmin));
    return max(0.0, tmin);
}

vec2 hash2(vec2 p) {
    p = vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)));
    return -1.0 + 2.0 * fract(sin(p) * 43758.5453123);
}

float noise(vec2 p) {
    vec2 i = floor(p);
    vec2 f = fract(p);
    vec2 u = f * f * (3.0 - 2.0 * f);
    float n00 = dot(hash2(i + vec2(0.0, 0.0)), f - vec2(0.0, 0.0));
    float n10 = dot(hash2(i + vec2(1.0, 0.0)), f - vec2(1.0, 0.0));
    float n01 = dot(hash2(i + vec2(0.0, 1.0)), f - vec2(0.0, 1.0));
    float n11 = dot(hash2(i + vec2(1.0, 1.0)), f - vec2(1.0, 1.0));
    float nx0 = mix(n00, n10, u.x);
    float nx1 = mix(n01, n11, u.x);
    return mix(nx0, nx1, u.y);
}

// 2. FBM with octave rotation and normalization to reduce artifacts
float fbm(vec2 p) {
    float value = 0.0;
    float amplitude = 0.5;
    float totalAmp = 0.0;
    // small rotation between octaves to break axis-aligned artifacts
    const float ROT = 0.5;
    mat2 rot = mat2(cos(ROT), -sin(ROT), sin(ROT), cos(ROT));
    for (int i = 0; i < 5; i++) {
        value += amplitude * noise(p);
        p = rot * p * 2.0;
        totalAmp += amplitude;
        amplitude *= 0.5;
    }
    return value / totalAmp;
}

// Main skybox function
vec3 skybox(vec3 ray_pos, vec3 ray_dir, vec3 sun_dir, float u_time) {
    // 1. Dawn gradient
    vec3 skyTop     = vec3(0.2, 0.4, 0.8);
    vec3 skyHorizon = vec3(1.0, 0.6, 0.4);
    float horizonModifier = 0.3;
    float t = smoothstep(0.0, 0.5, ray_dir.y+horizonModifier);
    vec3 color = mix(skyHorizon, skyTop, t);

    // 2. Cloud Sea (only above horizon)
    float cloudScale = 0.2;
    float cloudSpeed = 0.0005;
    vec2 cloudUV = ray_dir.xy * cloudScale + vec2(u_time * cloudSpeed);
    float cloudNoise = fbm(cloudUV);
    float cloudMask = smoothstep(0.4, 0.6, cloudNoise) * smoothstep(0.0, 0.5, ray_dir.y+horizonModifier);
    vec3 cloudColor = mix(vec3(1.0), vec3(0.9, 0.7, 0.8), cloudNoise);
    color = mix(color, cloudColor, cloudMask * 0.5);

    // 3. Storm Vortex (beneath island)
    float vortexAngle  = atan(ray_dir.z, ray_dir.x);        // range [-PI, PI]
    float vortexRadius = length(ray_dir.xz);
    float rotationSpeed = 0.2;
    float swirlCount    = 3.0;
    float angle         = vortexAngle + u_time * rotationSpeed;
    float normAngle = mod(angle / (2.0 * 3.14159265) * swirlCount, 1.0);
    float u = normAngle;
    float v = vortexRadius * 4.0 + u_time * 0.05;
    vec2 p1 = vec2(u, v);
    vec2 p2 = vec2(u - 1.0, v);
    float n1 = fbm(p1);
    float n2 = fbm(p2);
    float stormNoise = mix(n1, n2, u);
    float stormMask = smoothstep(0.2, 0.6, vortexRadius) * (1.0 - smoothstep(0.0, 0.3, ray_dir.y+horizonModifier + 0.2));
    vec3 stormColor = mix(skyHorizon, vec3(0.6, 0.4, 0.8), stormNoise*3.3);
    color = mix(color, stormColor, stormMask);

    // 4. Sun glow
    float sunAmount = max(dot(ray_dir, sun_dir.xzy), 0.0);
    color += vec3(1.0, 0.8, 0.6) * pow(sunAmount, 16.0) * 0.5;

    return color;
}


/**
 * Our raytracing function
 */
#define OK 0xffffffffu - 3
#define ERROR_RED 0xffffffffu - 2
#define ERROR_GREEN 0xffffffffu - 1
#define ERROR_BLUE 0xffffffffu
uint raytrace(inout vec3 ray_pos, vec3 ray_dir) {
    // caching a few commonly used values
    const vec3 inverted_ray_dir = 1.0f / ray_dir;
    const vec3 ray_sign_11 = vec3(ray_dir.x < 0. ? -1. : 1., ray_dir.y < 0. ? -1. : 1., ray_dir.z < 0. ? -1. : 1.);
    const vec3 ray_sign_01 = max(ray_sign_11, 0.);

    // a variable used to know which direction we have to mini-step to after each step (including the AABB jump step)
    vec3 step_mask;

    // ray-box intersection and a big step if the camera is outside the voxel volume
    const vec3 bmin = vec3(MINI_STEP_SIZE), bmax = vec3(WORLD_WIDTH - MINI_STEP_SIZE);
    if (any(greaterThanEqual(ray_pos, bmax)) || any(lessThan(ray_pos, bmin))) {
        const float intersect = AABBIntersect(bmin, bmax, camera.position.xyz, inverted_ray_dir, step_mask);
        if (intersect < 0) return ERROR_BLUE; // not bothering with rays that will not hit the bbox
        if (intersect > 0) ray_pos += ray_dir * intersect + step_mask * ray_sign_11 * MINI_STEP_SIZE;
    }

    // creating variables to track the size and bounding box of the **current** node, as well as the state of the current step
    vec3 lbmin = vec3(0), lbmax = vec3(WORLD_WIDTH);
    uint node_width = uint(WORLD_WIDTH) >> NODE_WIDTH_SQRT;
    bool has_collided, exited_local = false, exited_global = false;

    // setting up the stack & recurrent variables that will be used to traverse the 64-tree
    uint stack[MAX_DEPTH];
    uint depth = 0;
    uint current_node_index = 0;
    uint bitmask_index;
    Node current_node = node_pool[current_node_index];
    stack[depth] = current_node_index;

    // step limit
    uint step_count = 0;
    uint max_step_count = 512;

    // Doing the actual traversal!
    do {
    /**
         * For the most part, we are doing the classical DDA algorithm in this do-while loop
         */
        do {
            // increment step count
            step_count += 1;

            // quick checks
            if (step_count > max_step_count) return ERROR_RED;
            if (node_width == 0) return ERROR_GREEN;

            // check hit
            uvec3 v = (uvec3(ray_pos) & (node_width * NODE_WIDTH - 1u)) >> findMSB(node_width);
            bitmask_index = v.x + (v.z << NODE_WIDTH_SQRT) + (v.y << NODE_WIDTH);
            has_collided = (((bitmask_index < 32) ? current_node.bitmask_low : current_node.bitmask_high) & (1u << (bitmask_index & 31))) != 0;
            if (has_collided) break;

            // dda step, normal extraction, and mini-step
            vec3 side_dist = inverted_ray_dir * (node_width * ray_sign_01 - mod(ray_pos, node_width));
            float ray_step = min(min(side_dist.x, side_dist.y), side_dist.z);
            step_mask = vec3(equal(ray_step.xxx, side_dist));
            ray_pos += ray_dir * ray_step + MINI_STEP_SIZE * ray_sign_11 * step_mask;

            // check bbox
            exited_local = any(greaterThanEqual(ray_pos, lbmax)) || any(lessThan(ray_pos, lbmin));
            exited_global = any(greaterThanEqual(ray_pos, bmax)) || any(lessThan(ray_pos, bmin));
        } while (!has_collided && !exited_local && !exited_global);

    /**
         * First possible reason for exiting the DDA main loop: we hit something, so we need to either go down or return a color
         */
        if (has_collided) {
            do {
                // we lookup the node index of the hit to know where to descend to
                uint filtered_low, filtered_high;
                if (bitmask_index < 32) { filtered_low = current_node.bitmask_low & ((1u << bitmask_index) - 1u); filtered_high = 0u; }
                else { filtered_low = current_node.bitmask_low; filtered_high = current_node.bitmask_high & ((1u << (bitmask_index - 32)) - 1u); }
                uint hit_index = uint(bitCount(filtered_low) + bitCount(filtered_high)) + uint((current_node.header >> 1));

                // if there is a hit on a voxel in a terminal node: return hit color
                if ((current_node.header & 1) != 0) {
                    ray_pos -= vec3(MINI_STEP_SIZE) * ray_sign_11;
                    return hit_index;
                }

                // going down
                depth += 1;
                stack[depth] = current_node_index;
                current_node_index = hit_index;
                current_node = node_pool[hit_index];
                node_width = node_width >> NODE_WIDTH_SQRT;

                // quick checks
                if (depth > MAX_DEPTH)  return ERROR_GREEN;
                if (node_width == 0) return ERROR_GREEN;

                // check hit
                uvec3 v = (uvec3(ray_pos) & (node_width * NODE_WIDTH - 1u)) >> findMSB(node_width);
                bitmask_index = v.x + (v.z << NODE_WIDTH_SQRT) + (v.y << NODE_WIDTH);
                uint mask = 1u << (bitmask_index & 31);
                has_collided = ((bitmask_index < 32) ? (current_node.bitmask_low & mask) : (current_node.bitmask_high & mask)) != 0;
            } while (has_collided);

            // update lbb
            lbmin = uvec3(ray_pos) & uvec3(~(node_width * NODE_WIDTH - 1u));
            lbmax = lbmin + uvec3(node_width * NODE_WIDTH);
        }

        /**
         * Second possible reason for exiting the DDA main loop: we exited the current node, we have to go up
         */
        else if (exited_local && !exited_global) {
            do {
                // quick check to prevent accidents
                if (depth == 0) return ERROR_GREEN;

                // go up
                current_node_index = stack[depth];
                current_node = node_pool[current_node_index];
                depth -= 1;

                // update node width
                node_width = node_width << NODE_WIDTH_SQRT;

                // update lbb
                lbmin = uvec3(lbmin) & uvec3(~(node_width * NODE_WIDTH - 1u));
                lbmax = lbmin + uvec3(node_width * NODE_WIDTH);

                // check if we're good to resume the DDA
                exited_local = any(greaterThanEqual(ray_pos, lbmax)) || any(lessThan(ray_pos, lbmin));
            } while (exited_local);
        }
    } while (!exited_global);
    return OK;
}

/**
 * Doing some maths to get the ray dir given the camera position, direction, and the target pixel on-screen coordinates
 */
vec3 get_ray_dir(ivec2 screen_position) {
    ivec2 screen_size = imageSize(img);
    vec2 screen_space = ((screen_position + vec2(0.5)) / screen_size).xy;
    screen_space.y = 1.0 - screen_space.y;
    vec4 clip_space = vec4(screen_space * 2.0f - 1.0f, -1.0, 1.0);
    vec4 eye_space = vec4(vec2(camera.invProj * clip_space), -1.0, 0.0);
    vec3 ray_dir = normalize(vec3(camera.invView * eye_space));
    vec3 is_small = step(abs(ray_dir), vec3(EPSILON)); // 1.0 if |dir| < EPSILON
    return ray_dir + is_small * EPSILON * 2; // nudge
}

/**
 * Our voxel color table
 */
const vec3 colors[] = {
vec3(0.69, 0.88, 0.90), // SKY_BLUE
vec3(1.00, 0.40, 0.40), // DEBUG_RED
vec3(0.40, 1.00, 0.40), // DEBUG_GREEN
vec3(0.40, 0.40, 1.00), // DEBUG_BLUE
vec3(0.55, 0.55, 0.55), // STONE
vec3(0.42, 0.32, 0.25), // DIRT
vec3(0.30, 0.59, 0.31), // GRASS
vec3(0.42, 0.26, 0.15), // LOG
vec3(0.32, 0.56, 0.18)  // LEAVES
};

/**
 * Main function!
 */
void main() {
    // make sure current thread is inside the window bounds
    ivec2 screen_size = imageSize(img);
    if (any(greaterThanEqual(gl_GlobalInvocationID.xy, screen_size))) return;

    // get the ray direction for the current pixel
    const vec3 ray_dir = get_ray_dir(ivec2(gl_GlobalInvocationID.xy));

    // primary ray
    vec3 ray_pos = camera.position.xyz;
    uint voxel_index = raytrace(ray_pos, ray_dir);

    // sun direction
    float u_time = camera.position.w;
    float angle = u_time * 1.0;
    float c = cos(angle);
    float s = sin(angle);
    const vec3 base_sun_direction = normalize(vec3(0.4, 0.4, 1.0));
    vec3 sun_direction = normalize(vec3(
                                   c * base_sun_direction.x - s * base_sun_direction.y,
                                   s * base_sun_direction.x + c * base_sun_direction.y,
                                   base_sun_direction.z
                                   ));
    vec3 is_small = step(abs(sun_direction), vec3(EPSILON));
    sun_direction = sun_direction + is_small * EPSILON * 2;


    if (voxel_index >= 0xfffffffcu) {
        vec3 sky_color = skybox(ray_pos, ray_dir, sun_direction, u_time);
        imageStore(img, ivec2(gl_GlobalInvocationID.xy), vec4(sky_color, 0)); // colors[voxel_index - 0xfffffffcu]
        return;
    }

    uint voxel = uint(voxel_pool[voxel_index]);
    uint encoded_color = voxel & 0x7fu;
    vec3 color = colors[encoded_color < 9 ? encoded_color : 1].xyz;
    uint encoded_normal = (voxel >> 7);
    vec3 normal = normalize(vec3(float((encoded_normal >> 6) & 0x7u), float((encoded_normal >> 3) & 0x7u), float(encoded_normal & 0x7u)) / 3.5 - 1.0);

    // diffuse shading
    float diffuse = 0.5 + dot(normalize(normal), normalize(sun_direction.xyz)) / 2;
    if (diffuse < 0.5) { diffuse = diffuse / 3 + 0.3333;};

    // secondary ray
    float shadow = 1.0;
    ray_pos = ray_pos + normal.xzy * 4.0;
    uint sun_voxel_index = raytrace(ray_pos, sun_direction.xzy);
    if (sun_voxel_index < 0xfffffffcu) shadow = 0.5; // Reduced brightness for shadows

    // writing to the framebuffer
    imageStore(img, ivec2(gl_GlobalInvocationID.xy), vec4(color * min(diffuse, shadow), 0));
}